Diferencia entre let, const y var.

var
Alcance: Tiene un alcance de función o global. Si declaras una variable con var dentro de una función, solo será accesible dentro de esa función. Si lo haces fuera de una función, será accesible globalmente.
Reasignación: Se puede reasignar el valor.
Re-declaración: Puedes redeclarar una variable con var en el mismo ámbito.
Inicialización: Si no se inicializa, el valor será undefined

Ejemplo:
var nombre = "Juan";
console.log(nombre);  // Imprime: Juan

nombre = "Carlos";
console.log(nombre);  // Imprime: Carlos

var nombre = "Ana";
console.log(nombre);  // Imprime: Ana


let 
Alcance: Tiene un alcance de bloque, lo que significa que solo es accesible dentro del bloque {} en el que se define (por ejemplo, dentro de una función, bucle, o una estructura condicional).
Reasignación: Se puede reasignar el valor.
Re-declaración: No puedes redeclarar una variable con let en el mismo ámbito.
Inicialización: Igual que var, si no se inicializa, el valor será undefined

Ejemplo:
let edad = 25;
console.log(edad);  // Imprime: 25

edad = 30;
console.log(edad);  // Imprime: 30

// let edad = 35;  // Error: no puedes redeclarar una variable con let en el mismo bloque


const
Alcance: También tiene un alcance de bloque, igual que let.
Reasignación: No puedes reasignar una variable declarada con const. Una vez que se le asigna un valor, no puede cambiar.
Re-declaración: No puedes redeclarar una variable con const en el mismo ámbito.
Inicialización: Es obligatorio inicializar la variable en el momento de la declaración (no puede estar indefinida)

Ejemplo:
const pi = 3.1416;
console.log(pi);  // Imprime: 3.1416

// pi = 3.15;  // Error: no se puede reasignar una constante

const y = 5;
if (true) {
    const y = 10;
    console.log(y);  // Imprime: 10 (esta variable y está dentro del bloque if)
}
console.log(y);  // Imprime: 5 (esta variable y está fuera del bloque if)
